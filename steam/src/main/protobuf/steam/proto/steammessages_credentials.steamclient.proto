import "google/protobuf/descriptor.proto";
import "steam/proto/steammessages_unified_base.steamclient.proto";

option java_package = "steam.generated";

message CCredentials_TestAvailablePassword_Request {
	optional string password = 1;
	optional bytes sha_digest_password = 2;
	optional string account_name = 3;
}

message CCredentials_TestAvailablePassword_Response {
	optional bool is_valid = 3;
}

message CCredentials_GetSteamGuardDetails_Request {
}

message CCredentials_GetSteamGuardDetails_Response {
	message NewAuthentication {
		optional fixed32 timestamp_steamguard_enabled = 1;
		optional bool is_web_cookie = 2;
		optional int32 ipaddress = 3;
		optional string geoloc_info = 4;
		optional bool is_remembered = 5;
		optional string machine_name_user_supplied = 6;
	}

	optional bool is_steamguard_enabled = 1;
	optional fixed32 timestamp_steamguard_enabled = 2;
	repeated .CCredentials_GetSteamGuardDetails_Response.NewAuthentication newauthentication = 3;
	optional string machine_name_userchosen = 4;
}

message CCredentials_NewMachineNotificationDialog_Request {
	optional bool is_approved = 1;
	optional bool is_wizard_complete = 2;
}

message CCredentials_NewMachineNotificationDialog_Response {
}

message CCredentials_ValidateEmailAddress_Request {
	optional string stoken = 1;
	optional int32 appid = 2;
}

message CCredentials_ValidateEmailAddress_Response {
	optional bool was_validated = 1;
}

message CCredentials_SteamGuardPhishingReport_Request {
	optional string param_string = 1;
	optional uint32 ipaddress_actual = 2;
}

message CCredentials_SteamGuardPhishingReport_Response {
	optional uint32 ipaddress_loginattempt = 1;
	optional string countryname_loginattempt = 2;
	optional string statename_loginattempt = 3;
	optional string cityname_loginattempt = 4;
	optional uint32 ipaddress_actual = 5;
	optional string countryname_actual = 6;
	optional string statename_actual = 7;
	optional string cityname_actual = 8;
}

service Credentials {
	option (service_description) = "Credentials service";
	rpc TestAvailablePassword (.CCredentials_TestAvailablePassword_Request) returns (.CCredentials_TestAvailablePassword_Response) {
		option (method_description) = "TestAvailablePassword.";
	}
	rpc GetSteamGuardDetails (.CCredentials_GetSteamGuardDetails_Request) returns (.CCredentials_GetSteamGuardDetails_Response) {
		option (method_description) = "GetSteamGuardDetails.";
	}
	rpc NewMachineNotificationDialogResult (.CCredentials_NewMachineNotificationDialog_Request) returns (.CCredentials_NewMachineNotificationDialog_Response) {
		option (method_description) = "NewMachineNotificationDialogResult.";
	}
	rpc ValidateEmailAddress (.CCredentials_ValidateEmailAddress_Request) returns (.CCredentials_ValidateEmailAddress_Response) {
		option (method_description) = "Validate an email address given a token";
	}
	rpc SteamGuardPhishingReport (.CCredentials_SteamGuardPhishingReport_Request) returns (.CCredentials_SteamGuardPhishingReport_Response) {
		option (method_description) = "SteamGuardPhishingReport";
	}
}
